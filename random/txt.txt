Arrays:
-------
let sample = [];
sample.filter((item) => {
    return item.count<=100;
});

sample.map((item) => {
    return item.count;
});

sample.find((item) => {
    return item.name==='xyz';
});

sample.forEach((item) => {
    return item.name;
});

sample.some((item) => {
    return item.name==='xyz';
});

sample.every((item) => {
    return item.count<=100;
});

sample.reduce((currentTotal, item) => { // first to last
    return item.count + currentTotal;
},0);

sample.reduceRight((previousValue, currentValue) => {  //last to first
    previousValue.concat(currentValue)); 
});

sample.includes(7);
sample.indexOf();
sample.entries;
sample.length;
concat, shift, valueOf, keys, split, splice slice, keys;

Shallow copy = assign (reference of existing array/object)
Deep copy = Object.assign/Array.from/arry... (Creates new reference)

array.flat = merges inner arrays with parent array and removes empty slots
array.flat(2) = depth of arrays that are to be merged

array flat map
let stringArray = ["Javascript flat()", "flatMap()"];

stringArray.map(x=>x.split(" "));
// [["Javascript","flat()"],["flatMap()"]]

stringArray.flatMap(x => x.split(" "));
// ["Javascript","flat()","flatMap()"]

copyWithin - copies elements in array inside itself. overwrites. never increases array size.
array.copyWithin(target, start, end)



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Consoles:
---------
console.log(array);
console.log('%c here','color:orange; font-weight:bold;');
console.log({x,y,z});
console.table(array);
console.time('loop'); console.timeEnd();
console.trace('here');

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Data Structures:
---------------

Stack : LIFO////////  https://www.youtube.com/watch?v=Gj5qBheGOEo

    Should push items to top of stack:
    const stack = new Stack(4, 5);
    assert.equal(stack.push(1, 2, 3), 5);
    assert.deepEqual(stack.stack, [4, 5, 1, 2, 3]);

    Should push items to bottom of stack
    const stack = new Stack(4, 5);
    stack.reverse = true;
    assert.equal(stack.push(1, 2, 3), 5);
    assert.deepEqual(stack.stack, [1, 2, 3, 4, 5]);

    Should pop items from top of stack
    const stack = new Stack(1, 2, 3);
    assert.equal(stack.pop(), 3);

    Should pop items from bottom of stack
    const stack = new Stack(1, 2, 3);
    stack.reverse = true;
    assert.equal(stack.pop(), 1);

Queue : FIFO/////////////  https://www.youtube.com/watch?v=Gj5qBheGOEo

    Should enqueue items to the left
    const queue = new Queue(4, 5);
    assert.equal(queue.enqueue(1, 2, 3), 5);
    assert.deepEqual(queue.queue, [1, 2, 3, 4, 5]);

    Should enqueue items to the right
    const queue = new Queue(4, 5);
    queue.reverse = true;
    assert.equal(queue.enqueue(1, 2, 3), 5);
    assert.deepEqual(queue.queue, [4, 5, 1, 2, 3]);

    Should dequeue item from the right
    const queue = new Queue(1, 2, 3);
    assert.equal(queue.dequeue(), 3);

    Should dequeue item from the left
    const queue = new Queue(1, 2, 3);
    queue.reverse = true;
    assert.equal(queue.dequeue(), 1);

Linked list : value and next index https://www.youtube.com/watch?v=9YddVVsdG5A

Map - Key value pairs, corresponding to object. but keys will be objects, iterated

WeakMap - scope of parent wont be leaked outside

Set - Unique values, corresponding to arrays, iterated (default ES6)

WeakSet - reference to the parent scope wont be leaked (default ES6)

Trees - similar to linked list. each node can have multiple child nodes

graphs - similar to trees. each node can have multiple parent nodes

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Promises

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>